name: Require Team Approvals (Develop Only)
on:
  pull_request:
    branches:
      - develop  # âœ… This ensures the workflow runs only for PRs targeting the develop branch
    types: [opened, synchronize, reopened, review_requested]

permissions:
  contents: read
  pull-requests: read
  actions: read
  checks: write
  organization-projects: read
  id-token: write
  issues: read
  statuses: write

jobs:
  check_approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure PR Targets Develop Branch
        run: |
          if [[ "${{ github.base_ref }}" != "develop" ]]; then
            echo "This PR does not target the develop branch. Skipping approval checks."
            exit 0
          fi

      - name: Check Required Approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr_number = context.payload.pull_request.number;

            // Get the base branch (target branch of the PR)
            const baseBranch = context.payload.pull_request.base.ref;
            if (baseBranch !== "develop") {
              console.log("This PR does not target the develop branch. Skipping approval checks.");
              return;
            }

            // Get reviews from the pull request
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: pr_number
            });

            // Extract approved reviews
            const approvedReviews = reviews.filter(review => review.state === "APPROVED");
            const approvingUsers = [...new Set(approvedReviews.map(review => review.user.login))];

            // Fetch team members for each team
            const teams = ["teamahdfc", "teambsidgs"];
            let teamApprovals = { teamahdfc: false, teambsidgs: false };

            for (const team of teams) {
              const { data: teamMembers } = await github.rest.teams.listMembersInOrg({
                org: owner,
                team_slug: team
              });

              const teamUsernames = teamMembers.map(member => member.login);
              if (approvingUsers.some(user => teamUsernames.includes(user))) {
                teamApprovals[team] = true;
              }
            }

            // Ensure at least one approval from each team
            if (!teamApprovals.teamahdfc || !teamApprovals.teambsidgs) {
              core.setFailed("PR cannot be merged. At least one approval is required from each team.");
            }
