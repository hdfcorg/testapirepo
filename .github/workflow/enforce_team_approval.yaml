name: Enforce Team-Based Approvals

on:
  pull_request:
    branches:
      - develop  # Applies only to PRs targeting develop
    types: [opened, synchronize, reopened, review_requested, submitted, edited]

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    env:
      ORG_ACCESS_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}  # Use stored PAT
    
    steps:
      - name: Debug GitHub Event
        run: |
          echo "üîπ GitHub Event Path: $GITHUB_EVENT_PATH"
          cat $GITHUB_EVENT_PATH

      - name: Get PR Approvals
        id: approvals
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "PR Number: $PR_NUMBER"
          
          REVIEWS=$(curl -s -H "Authorization: Bearer $ORG_ACCESS_TOKEN" \
                     -H "Accept: application/vnd.github.v3+json" \
                     "https://api.github.com/repos/hdfcorg/testapirepo/pulls/$PR_NUMBER/reviews")
          
          if [[ -z "$REVIEWS" || "$REVIEWS" == "[]" ]]; then
            echo "‚ùå No approvals found yet. Merge is blocked until at least one review is submitted."
            exit 1
          fi
          
          echo "$REVIEWS" > reviews.json
          echo "‚úÖ PR Reviews Fetched Successfully."

      - name: Debug PR Approvals
        run: cat reviews.json  # Print reviews for debugging

      - name: Validate Approvers from Different Teams
        id: validate_teams
        run: |
          ORGANIZATION="hdfcorg"
          TEAM_A="teamahdfc"
          TEAM_B="teambsidgs"

          TEAM_A_APPROVED=0
          TEAM_B_APPROVED=0

          TEAM_A_MEMBERS=$(curl -s -H "Authorization: Bearer $ORG_ACCESS_TOKEN" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/orgs/$ORGANIZATION/teams/$TEAM_A/members" | jq -r '.[].login')
          TEAM_B_MEMBERS=$(curl -s -H "Authorization: Bearer $ORG_ACCESS_TOKEN" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/orgs/$ORGANIZATION/teams/$TEAM_B/members" | jq -r '.[].login')

          echo "üîπ Team A Members: $TEAM_A_MEMBERS"
          echo "üîπ Team B Members: $TEAM_B_MEMBERS"

          for USER in $(jq -r '.[] | select(.state=="APPROVED") | .user.login' reviews.json); do
            echo "‚úÖ Checking approval from: $USER"
            
            if echo "$TEAM_A_MEMBERS" | grep -qw "$USER"; then
              TEAM_A_APPROVED=1
              echo "‚úÖ $USER is in Team A"
            fi
            if echo "$TEAM_B_MEMBERS" | grep -qw "$USER"; then
              TEAM_B_APPROVED=1
              echo "‚úÖ $USER is in Team B"
            fi
          done

          if [[ $TEAM_A_APPROVED -eq 0 || $TEAM_B_APPROVED -eq 0 ]]; then
            echo "‚ùå Error: At least one approval from each team is required!"
            exit 1
          else
            echo "‚úÖ Approvals from both teams verified. Merge allowed."
          fi

      - name: Block Merge if Conditions Fail
        if: failure()
        run: |
          echo "‚ùå Merge is blocked. PR must have at least one approval from each team."
          exit 1

  request_reviewers:
    runs-on: ubuntu-latest
    env:
      ORG_ACCESS_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}

    steps:
      - name: Debug GitHub Event
        run: |
          echo "üîπ GitHub Event Path: $GITHUB_EVENT_PATH"
          cat $GITHUB_EVENT_PATH

      - name: Automatically Request Reviewers from Teams
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          curl -X POST -H "Authorization: Bearer $ORG_ACCESS_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/hdfcorg/testapirepo/pulls/$PR_NUMBER/requested_reviewers" \
               -d '{"team_reviewers": ["teamahdfc", "teambsidgs"]}'
